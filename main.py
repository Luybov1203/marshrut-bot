from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN") or "PASTE_YOUR_TOKEN_HERE"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üîç –£–∑–Ω–∞—Ç—å, –≥–¥–µ —è —Å–µ–π—á–∞—Å", "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç–æ–¥")

nav_kb = ReplyKeyboardMarkup(resize_keyboard=True)
nav_kb.add("üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", "üìç –ú–∞—Ä—à—Ä—É—Ç –¥–Ω—è")
nav_kb.add("‚úâÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∏–Ω–∏-—Å–µ—Å—Å–∏—é", "üëÄ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
nav_kb.add("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

q1_kb = ReplyKeyboardMarkup(resize_keyboard=True)
q1_kb.add("–†–∞–±–æ—Ç–∞", "–°–µ–º—å—è", "–Ø —Å–∞–º(–∞)")
q1_kb.add("–í—Å—ë —Å—Ä–∞–∑—É", "–ù–µ –∑–Ω–∞—é")

q2_kb = ReplyKeyboardMarkup(resize_keyboard=True)
q2_kb.add("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —É—Å—Ç–∞–ª")
q2_kb.add("–ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è, –≤—Å—ë —Ä—É—à–∏—Ç—Å—è")
q2_kb.add("–•–æ—á—É –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –±–æ—é—Å—å —Ç—Ä–æ–≥–∞—Ç—å")
q2_kb.add("–ü—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ—Ç–∞")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Form(StatesGroup):
    Q1 = State()
    Q2 = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    text = "üîç –ó–¥–µ—Å—å –Ω–µ –±—É–¥–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n–ó–∞—Ç–æ –±—É–¥–µ—Ç —è—Å–Ω–æ—Å—Ç—å.\n\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å ‚Äî –Ω–∞—á–Ω—ë–º."
    await message.answer(text, reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üîç –£–∑–Ω–∞—Ç—å, –≥–¥–µ —è —Å–µ–π—á–∞—Å")
async def start_diag(message: types.Message):
    await message.answer("–ß—Ç–æ —Å–µ–π—á–∞—Å —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", reply_markup=q1_kb)
    await Form.Q1.set()

@dp.message_handler(state=Form.Q1)
async def q1_answer(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer("–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?", reply_markup=q2_kb)
    await Form.Q2.set()

@dp.message_handler(state=Form.Q2)
async def q2_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    q1 = data.get("q1")
    q2 = message.text

    response = "–¢—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ù–µ –∑–Ω–∞—á–∏—Ç ‚Äî —Å–ª–æ–º–∞–Ω. –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω —Ñ–æ–∫—É—Å.\n–ú–µ—Ç–æ–¥ ¬´–ú–∞—Ä—à—Ä—É—Ç¬ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏. –í–æ—Ç —Ç–≤–æ—è."
    await message.answer(response)
    await message.answer("üìç –•–æ—á—É —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç", reply_markup=nav_kb)
    await state.finish()

@dp.message_handler(lambda m: m.text == "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç–æ–¥")
async def show_method(message: types.Message):
    await message.answer("–ú–µ—Ç–æ–¥ '–ú–∞—Ä—à—Ä—É—Ç' ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —è—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ–±–µ.", reply_markup=nav_kb)

@dp.message_handler(lambda m: m.text == "üìç –ú–∞—Ä—à—Ä—É—Ç –¥–Ω—è")
async def route_of_day(message: types.Message):
    questions = [
        "üìä –ì–¥–µ —Ç—ã —É—Å–∫–æ—Ä—è–µ—à—å—Å—è, —á—Ç–æ–±—ã –Ω–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å?",
        "üìñ –ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ—à—å –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏, –∞ –Ω–µ –∏–∑ —Å–º—ã—Å–ª–∞?"
    ]
    for q in questions:
        await message.answer(q)

@dp.message_handler(lambda m: m.text == "‚úâÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∏–Ω–∏-—Å–µ—Å—Å–∏—é")
async def book_meeting(message: types.Message):
    await message.answer("üòä –ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 15 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø–æ–≤–µ—Ä–Ω—É—Ç—å –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–µ–±—è. –ù–∞–ø–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ.")

@dp.message_handler(lambda m: m.text == "üëÄ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
async def more_info(message: types.Message):
    await message.answer("–ú–µ—Ç–æ–¥ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –∏ –∏—Ö —Å–µ–º—å—è–º –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö. –≠—Ç–æ –ø—Ä–æ —Å–º—ã—Å–ª, –∞ –Ω–µ –ø—Ä–æ –º–æ—Ç–∏–≤–∞—Ü–∏—é.")

@dp.message_handler(lambda m: m.text in ["üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"])
async def restart(message: types.Message):
    await send_welcome(message)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
