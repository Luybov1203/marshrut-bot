from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging
import os
import random

# üîê –ü—Ä—è–º–æ–π —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å os.getenv)
API_TOKEN = "7638069426:AAFsxGjvX4uFokHPTufLqgXelr6nDlljsYQ"

# üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render
WEBHOOK_HOST = "https://marshrut-bot.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 3000))

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Form(StatesGroup):
    Q1 = State()
    Q2 = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("\ud83d\udd0d –£–∑–Ω–∞—Ç—å, –≥–¥–µ —è —Å–µ–π—á–∞—Å", callback_data="diagnose"),
    InlineKeyboardButton("\ud83d\uddd5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç–æ–¥", callback_data="method")
)

diag_q1 = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("–†–∞–±–æ—Ç–∞", callback_data="q1_–†–∞–±–æ—Ç–∞"),
    InlineKeyboardButton("–°–µ–º—å—è", callback_data="q1_–°–µ–º—å—è"),
    InlineKeyboardButton("–Ø —Å–∞–º(–∞)", callback_data="q1_–Ø —Å–∞–º(–∞)"),
    InlineKeyboardButton("–í—Å—ë —Å—Ä–∞–∑—É", callback_data="q1_–í—Å—ë —Å—Ä–∞–∑—É"),
    InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="q1_–ù–µ –∑–Ω–∞—é")
)

diag_q2 = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —É—Å—Ç–∞–ª", callback_data="q2_–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"),
    InlineKeyboardButton("–ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è, –≤—Å—ë —Ä—É—à–∏—Ç—Å—è", callback_data="q2_–∫–æ–Ω—Ç—Ä–æ–ª—å"),
    InlineKeyboardButton("–•–æ—á—É –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –±–æ—é—Å—å", callback_data="q2_–±–æ—é—Å—å"),
    InlineKeyboardButton("–ü—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ—Ç–∞", callback_data="q2_–ø—É—Å—Ç–æ—Ç–∞")
)

nav_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("\ud83d\udccd –ú–∞—Ä—à—Ä—É—Ç –¥–Ω—è", callback_data="day_route"),
    InlineKeyboardButton("\u2709\ufe0f –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∏–Ω–∏-—Å–µ—Å—Å–∏—é", callback_data="session"),
    InlineKeyboardButton("\ud83d\udc40 –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="details"),
    InlineKeyboardButton("\ud83d\udd04 –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="restart")
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "\ud83d\udd0d <b>–ó–¥–µ—Å—å –Ω–µ –±—É–¥–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏.</b>\n–ó–∞—Ç–æ –±—É–¥–µ—Ç —è—Å–Ω–æ—Å—Ç—å.\n\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å ‚Äî –Ω–∞—á–Ω—ë–º.",
        reply_markup=main_menu
    )

@dp.callback_query_handler(lambda c: c.data == "diagnose")
async def handle_diagnose(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–ß—Ç–æ —Å–µ–π—á–∞—Å —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", reply_markup=diag_q1)
    await Form.Q1.set()

@dp.callback_query_handler(lambda c: c.data.startswith("q1_"), state=Form.Q1)
async def handle_q1(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(q1=callback_query.data[3:])
    await callback_query.message.edit_text("–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?", reply_markup=diag_q2)
    await Form.Q2.set()

@dp.callback_query_handler(lambda c: c.data.startswith("q2_"), state=Form.Q2)
async def handle_q2(callback_query: CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.edit_text(
        "\ud83e\udde1 –¢—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ù–µ –∑–Ω–∞—á–∏—Ç ‚Äî —Å–ª–æ–º–∞–Ω. –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω —Ñ–æ–∫—É—Å.\n–ú–µ—Ç–æ–¥ ¬´–ú–∞—Ä—à—Ä—É—Ç¬ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏. –í–æ—Ç —Ç–≤–æ—è.",
        reply_markup=nav_kb
    )

@dp.callback_query_handler(lambda c: c.data == "method")
async def show_method(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "\ud83d\uddd5 –ú–µ—Ç–æ–¥ <b>¬´–ú–∞—Ä—à—Ä—É—Ç¬ª</b> ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —è—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ–±–µ.",
        reply_markup=nav_kb
    )

@dp.callback_query_handler(lambda c: c.data == "day_route")
async def day_route(callback_query: CallbackQuery):
    cards = [
        {"photo": "https://images.unsplash.com/photo-1506744038136-46273834b3fb", "caption": "\ud83d\uddd0 –ò–Ω–æ–≥–¥–∞ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∏–¥—Ç–∏, –¥–∞–∂–µ –Ω–µ —á—É–≤—Å—Ç–≤—É—è –¥–æ—Ä–æ–≥–∏."},
        {"photo": "https://images.unsplash.com/photo-1497294815431-9365093b7331", "caption": "\ud83d\udeb6\u200d‚ôÇÔ∏è –ü—Ä—è–º–æ ‚Äî –ø—Ä–∏–≤—ã—á–∫–∞. –°–ª–µ–≤–∞ ‚Äî —Ç—ã —Å–∞–º. –û—Å—Ç–∞–Ω–æ–≤–∏—Å—å –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."},
        {"photo": "https://images.unsplash.com/photo-1530650052540-4693b1f4f33f", "caption": "\ud83c\udf1e –°–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å. –ü—Ä–æ—Å—Ç–æ —Ç—É—á–∏ –ª–µ–≥–ª–∏. –°–Ω–∏–º–µ–º –∏—Ö –ø–æ —á–∞—Å—Ç—è–º."},
        {"photo": "https://images.unsplash.com/photo-1488805990569-3c9e1d76d51c", "caption": "\ud83d\udd0a –í–æ–∫—Ä—É–≥ ‚Äî —à—É–º. –í–Ω—É—Ç—Ä–∏ ‚Äî —Ç–∏—à–∏–Ω–∞. –ê —Ç—ã –≥–¥–µ?"},
        {"photo": "https://images.unsplash.com/photo-1507525428034-b723cf961d3e", "caption": "\ud83e\udea8 –ò–Ω–æ–≥–¥–∞ –ø–æ–∫–æ–π ‚Äî –ª–æ–≤—É—à–∫–∞. –ü–æ—Ä–∞ –ø–æ—à–µ–≤–µ–ª–∏—Ç—å—Å—è?"},
    ]
    card = random.choice(cards)
    await callback_query.message.answer_photo(photo=card["photo"], caption=card["caption"])
    await callback_query.message.answer("\ud83d\udcca –ì–¥–µ —Ç—ã —É—Å–∫–æ—Ä—è–µ—à—å—Å—è, —á—Ç–æ–±—ã –Ω–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å?")
    await callback_query.message.answer("\ud83d\udcd6 –ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ—à—å –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏, –∞ –Ω–µ –∏–∑ —Å–º—ã—Å–ª–∞?")

@dp.callback_query_handler(lambda c: c.data == "session")
async def session(callback_query: CallbackQuery):
    await callback_query.message.answer("\ud83d\ude0a –ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 15 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø–æ–≤–µ—Ä–Ω—É—Ç—å –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–µ–±—è.\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ—é —Ç–æ—á–∫—É? –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç –∏–ª–∏ –∑–∞–ø–∏—à–∏—Å—å.")

@dp.callback_query_handler(lambda c: c.data == "details")
async def details(callback_query: CallbackQuery):
    await callback_query.message.answer("–ú–µ—Ç–æ–¥ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è, —Å–æ–±–ª—é—Å—Ç–∏ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —Ä–∞–±–æ—Ç–æ–π. –≠—Ç–æ –ø—Ä–æ —Å–º—ã—Å–ª, –∞ –Ω–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é.")

@dp.callback_query_handler(lambda c: c.data == "restart")
async def restart(callback_query: CallbackQuery):
    await cmd_start(callback_query.message)

# --- Webhook ---
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    logging.warning("Webhook —É–¥–∞–ª—ë–Ω")

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
